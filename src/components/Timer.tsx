import { useEffect, VFC, Dispatch, SetStateAction } from 'react';
import { useTimer } from '@src/hooks';
import { pomodoroType } from '@src/components/type';

type TimerPropsType = {
  pomodoroIndex: number;
  setPomodoroIndex: Dispatch<SetStateAction<number>>;
  pomodoros: pomodoroType[];
};

export const Timer: VFC<TimerPropsType> = ({
  pomodoroIndex,
  setPomodoroIndex,
  pomodoros,
}) => {
  const { remaining, minutes, seconds, start, stop, reset, isDone, isRunning } =
    useTimer(pomodoros[pomodoroIndex].time);

  // //currentTime„ÅåÂ§â„Çè„Çã„Åü„Å≥„Å´title„ÇíÊõ∏„ÅçÊèõ„Åà„Çã
  useEffect(() => {
    document.title = `${pomodoros[pomodoroIndex].type} - ${minutes}:${seconds}`;
    const favicon = document.getElementById('favicon');
    if (!favicon) return;
    if (!(favicon instanceof HTMLLinkElement)) return;
    const icon = pomodoros[pomodoroIndex].type === 'work' ? 'üë®‚Äçüíª' : '‚òïÔ∏è';
    favicon.href = `data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text x=%2250%%22 y=%2250%%22 style=%22dominant-baseline:central;text-anchor:middle;font-size:90px;%22>${icon}</text></svg>`;
  }, [remaining]);

  //index„ÇíÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞
  useEffect(() => {
    //„Çø„Ç§„Éû„Éº„ÅåÁµÇ‰∫Ü„Åó„Å¶„ÅÑ„Å™„ÅÑÊôÇ„ÅØÊó©Êúü„É™„Çø„Éº„É≥
    if (!isDone) return;
    //index„Åålast„Åã„Å©„ÅÜ„Åã
    const isLast = pomodoros.length - 1 === pomodoroIndex;
    if (isLast) {
      //index„Åålast„ÅÆÂ†¥Âêà0„Çí„Çª„ÉÉ„Éà„Åô„Çã
      setPomodoroIndex(0);
    } else {
      //index„Åålast„Åß„ÅØ„Å™„ÅÑÂ†¥Âêà„ÅØÂâç„ÅÆindex+1„Åô„Çã
      setPomodoroIndex((prevState) => prevState + 1);
    }
  }, [isDone]);

  //„Çø„Ç§„Éû„Éº„ÇíÂÜç„Çª„ÉÉ„Éà„Åô„ÇãÈñ¢Êï∞
  useEffect(() => {
    //„Çø„Ç§„Éû„Éº„ÅåÁµÇ‰∫Ü„Åó„Å¶„ÅÑ„Å™„ÅÑÊôÇ„ÅØÊó©Êúü„É™„Çø„Éº„É≥
    if (!isDone) return;
    //„Çø„Ç§„Éû„Éº„Å´Êñ∞„Åó„ÅÑ„Çø„Ç§„É†„ÇíÁôªÈå≤„Åô„Çã
    reset(pomodoros[pomodoroIndex].time);
    //„Çπ„Çø„Éº„Éà„Åô„Çã
    start();
  }, [pomodoroIndex]);

  const onReset = () => {
    setPomodoroIndex(0);
    reset(pomodoros[0].time);
  };

  return (
    <>
      <div className="text-center font-bold text-8xl tabular-nums slashed-zero sm:text-9xl">
        <span>{minutes}</span>:<span>{seconds}</span>
      </div>
      {isRunning ? (
        <button type="button" onClick={stop}>
          stop
        </button>
      ) : (
        <button type="button" onClick={start}>
          start
        </button>
      )}
      <button type="button" onClick={onReset}>
        reset
      </button>
    </>
  );
};
